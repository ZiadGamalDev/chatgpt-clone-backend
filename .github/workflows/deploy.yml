name: Deploy ChatGPT Clone Backend to Contabo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Create deployment archive
        run: |
          tar --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='*.tar.gz' -czf chatgpt-clone-backend.tar.gz .
          
      - name: Deploy to Contabo Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Backup current version
            if [ -f "package.json" ]; then
              echo "Creating backup..."
              cp -r . ../chatgpt-clone-backend-backup-$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # Clean directory (except .env and ecosystem.config.json)
            find . -maxdepth 1 -type f ! -name '.env' ! -name 'ecosystem.config.json' ! -name '.htaccess' -delete || true
            find . -maxdepth 1 -type d ! -name '.' ! -name 'cgi-bin' ! -name '.well-known' -exec rm -rf {} + || true
            
      - name: Upload deployment archive
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "chatgpt-clone-backend.tar.gz"
          target: ${{ secrets.DEPLOY_PATH }}
          
      - name: Extract and restart application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Extract new files
            tar -xzf chatgpt-clone-backend.tar.gz
            rm chatgpt-clone-backend.tar.gz
            
            # Install dependencies and build
            npm ci --only=production
            npm run build
            
            # Restart with PM2
            pm2 restart chatgpt-clone-backend || pm2 start ecosystem.config.json
            pm2 save
            
            echo "Deployment completed successfully!"
            pm2 status
